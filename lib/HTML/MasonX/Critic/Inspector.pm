package HTML::MasonX::Critic::Inspector;
# ABSTRACT: Tools for inspecting a HTML::Mason codebase

use strict;
use warnings;

our $VERSION = '0.01';

use Carp         ();
use Scalar::Util ();

use HTML::Mason::Interp;

use HTML::MasonX::Critic::Inspector::ObjectCode;
use HTML::MasonX::Critic::Inspector::Compiler;

use UNIVERSAL::Object;
our @ISA; BEGIN { @ISA = ('UNIVERSAL::Object') }
our %HAS; BEGIN {
    %HAS = (
        # ... private
        _mason_args  => sub { +[] },
        _interpreter => sub {},
    )
}

sub BUILDARGS {
    my $class = shift;
    if ( scalar @_ == 1 ) {
        # attach to a running interpreter ...
        Carp::confess('You can either pass an instance of `HTML::Mason::Interp` or a list of key-value args for its constructor')
            unless Scalar::Util::blessed( $_[0] )
                && $_[0]->isa('HTML::Mason::Interp');

        return +{ _interpreter => $_[0] };
    }
    else {
        # all args are mason args
        return +{ _mason_args => [ @_ ] };
    }
}

sub BUILD {
    my ($self, $params) = @_;

    if ( not defined $self->{_interpreter} ) {
        # make the interpreter, but first
        # prepare the $params to pass to
        # Mason, and since we will alter it
        # we make a copy ...
        my %mason_args = @{ $self->{_mason_args} };

        # at least make sure they set up comp_root
        Carp::confess( 'Cannot create a new Mason Interpreter unless you supply `comp_root` parameter' )
            unless $mason_args{comp_root};

        Carp::confess( 'The `comp_root` must be a valid directory' )
            unless -e $mason_args{comp_root} && -d $mason_args{comp_root};

        # prep the comp_root before passing to Mason ...
        $mason_args{comp_root} = $mason_args{comp_root}->stringify
            if Scalar::Util::blessed( $mason_args{comp_root} )
            && $mason_args{comp_root}->isa('Path::Tiny');

        # ... build an interpreter ...

        my $interpreter = HTML::Mason::Interp->new( %mason_args )
            || die "Could not load Mason Interpreter";

        # then set up the minimum needs to mock this run ...
        $interpreter->set_global(
            $_ => HTML::MasonX::Critic::Inspector::__EVIL__->new
        ) foreach map s/^[$@%]//r, $interpreter->compiler->allow_globals; #/

        $self->{_interpreter} = $interpreter;
    }
}

## accessor ...

sub interpreter { $_[0]->{_interpreter} }

## do things ...

sub get_object_code_inspector_for_path {
    my ($self, $path) = @_;

    return HTML::MasonX::Critic::Inspector::ObjectCode->new(
        interpreter => $self->interpreter,
        path        => $path,
    );
}

sub get_compiler_inspector_for_path {
    my ($self, $path) = @_;

    return HTML::MasonX::Critic::Inspector::Compiler->new(
        interpreter => $self->interpreter,
        path        => $path,
    );
}

## internal stuff ...

## ------------------------------------------- ##
## Ugly internal stuff
## ------------------------------------------- ##

package    # ignore this, internal use only
  HTML::MasonX::Critic::Inspector::__EVIL__ {
    sub AUTOLOAD { return bless {}, __PACKAGE__ }
    sub DESTROY { () }
}

## ------------------------------------------- ##

1;

__END__

=pod

=head1 SYNOPSIS

    say('Under ¯\_(ツ)_/¯ Construction');

=head1 DESCRIPTION

                 +----------------+
                 |       Compiler |
    +---------------+      ____   |
    | $Mason_Source |===>>|~##@|  |
    +---------------+      \*#/   |
                 |         |% |   |
                 +---------| @|---+
                           |$ |
                        +--|  |-------+
                        |             |
                        | &ObjectCode |
                        +-------------+

                  Compile Time
    -----------------------------------------
                    Run Time
       _________              ______________
      /        /             /     Runtime /
     /  Eval << &ObjectCode >> $m         /
    /________/             /_____________/


=head1 INSPECTORS

There are three main inspectors, each of which provides an
interface of a different phase of the life cycle of Mason code.

=head2 Compiler

This inspects the compiler internals, which represents code in a
transitory state between source on disk and the runtime component
objects.

=head2 ObjectCode

This is the code generated by the Mason compiler, which - when
evaluated – is the runtime Mason component objects.

=head2 Runtime

This is the actual runtime component objects that are created when
the above object code is evaluated. (This still needs a lot of work).

=head1 QUERYING

These are modules which can be used to query the various objects
produced by the inspectors above.

=head2 PerlCode

This will query a PerlCode object produced by the Compiler inspector
using L<PPI> as the in memory represenation of the source code. All
the results of the queries are Perl result objects.

=head2 PerlCritic

This will run L<Perl::Critic> on Mason files, or rather, the
Perl source code generated by Mason. Currently we support the
following:

=over 4

=item L<ObjectCode>

The output of the L<ObjectCode> inspector is feed to L<Perl::Critic>,
and the L<Perl::Critic::Violation> objects are returned. This will
include the compiled template + some internal Mason machinery needed
to run the component, as well as all the different Mason blocks. This
is always going to be the most comprehensive view of the code, but
it is possible to get false positive/negatives because of the Mason
machinery in the file.

=item L<Compiler>

Given a L<Compiler> inspector, we attempt to then build a (mostly)
Mason machinery-free verions of the object code that is not targeted
at being able to actually run, but instead to be syntactically
correct Perl code which is complete enough to run L<Perl::Critic>
over it and get results with (hopefully) fewer false negative/positive
then the L<ObjectCode> version above. As with the above, this will
return the L<Perl::Critic::Violation> objects.

=back

=head1 RESULTS

These are objects that represent the results of queries described
above.

=head2 L<HTML::MasonX::Perl::>

These are the result objects of the L<PerlCode> queries.


=head2 L<Perl::Critic::Violation>

These are the result objects of the L<PerlCritic> queries.

=cut
