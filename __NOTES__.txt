Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter


------------------

use HTML::MasonX::Inspector::Util::Perl::CriticViolation;
use Perl::Critic ();

sub get_violations {
    my ($self) = @_;

    my $critic = Perl::Critic->new(
        -profile  => Path::Tiny::path( $App::HTML::MasonX::CONFIG{'DATA_ROOT'} )
                        ->child('compiler-report')
                        ->child('perlcriticrc')
                        ->stringify
    );

    my $compiler = $self->{_compiler};
    my $obj_code = join '', (
        "\n## ========================================\n\n",
        "use strict;\n",
        "use warnings;\n",
        "\n## ----------------------------------------\n\n",
        ('our ('. (join ', ' => map { $_ } $compiler->allow_globals) . ');' . "\n"),
        "\n## ----------------------------------------\n\n",
        (join "\n" => map {
            '#line '.$_->{line_number}.' "'.$_->{file}.'"'."\n".'my '.$_->{name}.';'
        } $self->get_args), "\n",
        "\n## ----------------------------------------\n\n",
        $compiler->_blocks( 'once' ),
        "\n## ----------------------------------------\n\n",
        $compiler->_blocks( 'init' ),
        "\n## ----------------------------------------\n\n",
        $compiler->{current_compile}{body},
        "\n## ----------------------------------------\n\n",
        $compiler->_blocks( 'cleanup' ),
        "\n## ========================================\n\n",
    );

    #warn $obj_code;

    my @original   = $critic->critique( \$obj_code );
    my @violations = map HTML::MasonX::Inspector::Util::Perl::CriticViolation->new(
        violation => $_
    ), @original;

    return @violations;
}
